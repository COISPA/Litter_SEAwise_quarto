{"title":"Litter risk analysis","markdown":{"yaml":{"title":"Litter risk analysis","author":"M. T. Spedicato, W. Zupa"},"headingText":"stampa la data/ora di compilazione in stile Rmd originale","containsRefs":false,"markdown":"\n\n```{r, echo=FALSE}\ncat(sprintf(\"Compiled on %s\\n\\n\", format(Sys.time(), '%d/%m/%Y, %H:%M')))\n```\n\n<!-- Logo in the title -->\n\n<style>\n/* Make the title line a flex row with the logo on the left */\n.title-with-logo {\n  display: flex;\n  align-items: center;\n  gap: 14px;              /* spacing between logo and text */\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n.title-with-logo img {\n  width: 120px;           /* adjust logo size as needed */\n  height: auto;\n}\n</style>\n\n<script>\n// Wrap the H1.title with a container and prepend the logo to its left\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  // find the auto-generated title element\n  var h1 = document.querySelector(\"h1.title\");\n  if(!h1) return;\n\n  // create wrapper\n  var wrap = document.createElement(\"div\");\n  wrap.className = \"title-with-logo\";\n\n  // create logo\n  var img = document.createElement(\"img\");\n  img.src = \"pics/SeaWiseFinal-01.png\";   // relative path from Rmd root\n  img.alt = \"SEAwise logo\";\n\n  // insert: wrap replaces h1, then put logo + h1 inside wrap\n  h1.parentNode.insertBefore(wrap, h1);\n  wrap.appendChild(img);\n  wrap.appendChild(h1);\n});\n</script>\n\n<!-- Links -->\n\n<div id=\"header-links\">\n  <a href=\"https://seawiseproject.org/\" target=\"_blank\">\n    <img src=\"pics/SeaWiseFinal-01.png\" width=\"20\"  height=\"22\" style=\"margin-right:6px; vertical-align:middle;\">\n    SEAwise Website\n  </a>\n  <a href=\"https://github.com/COISPA/litter\" target=\"_blank\">\n    <img src=\"pics/github.svg\" width=\"20\" height=\"22\" style=\"margin-right:6px; vertical-align:middle;\">\n    COISPA Github\n  </a>\n</div>\n\n<!-- start of the script -->\n\n\n# Data preparation\n\nThe script begins by preparing the working environment. All existing variables are cleared, and the required libraries for data manipulation and visualization are loaded. Two reference tables are then defined:\n\n-   Litter categories table (cats): lists the different categories of marine litter considered in the analysis, each with a short code (cats) and a descriptive label (cats_names).\n\n-   Fleet table (fleet_table): contains the fishing fleets included in the study, specifying their codes, full names, and associated impact levels (Low, Medium, High).\n\n```{r, warning=FALSE, message=FALSE}\n#| code-fold: true\n#| echo: true\n\n# Clean the environment\nrm(list = ls(all = TRUE))\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(raster)\nlibrary(dplyr)\nlibrary(tidyr)\n\ncats <- data.frame(\n  cats=c(\"ADV\",\"INGFB\",\"INGSC\",\"ENT\",\"FR\",\n         \"SUP\",\"Plastic\",\"Rubber\",\"Metal\",\n         \"Glass\",\"Natural\",\"Other\"),\n  cats_names=c(\"Advection\",\n               \"Ingestion fish and birds\",\n               \"Ingestion sharks and cetaceans\", \n               \"Entanglement\", \n               \"Fishing related\",\n               \"SUP\",\n               \"Plastic\",\n               \"Rubber\",\n               \"Metal\",\n               \"Glass\",\n               \"Natural\",\n               \"Other\"))\n\n# Define fleet table with impact levels\nfleet_table <- data.frame(\n  fleet_code = c(\"PS\", \"Trawls\", \"SSF\"),\n  fleet_name = c(\"Purse Seiners\", \"Trawls\", \"Small-Scale Fisheries\"),\n  fleet_impact = c(\"Low\", \"Medium\", \"High\")\n)\n```\n\nAfter preparing the environment, the script defines a set of global parameters that control the subsequent analysis. These include: - Hazard thresholds (hazard_thrs): values used to classify the level of risk into low, medium, and high categories. - Years of interest (ys): the temporal window considered for the analysis, by default set to the last three years of the available time series. - AREA: the spatial domain of the analysis, which can be restricted to a specific GSA, subregion etc. or left unfiltered (NA).The user must also select the litter category to be analysed. By default, the script processes marine litter data expressed as mass density (kg/km²), although alternative settings can be specified through the variables *response* and *response_name*.\n\nFinally, the script requires the definition of file paths: - a directory for storing the results of the analysis (resdir), which is automatically created if not already present, - and the directory containing the input data (data_dir).\n\n```{r, warning=FALSE, message=FALSE}\nhazard_thrs <- risk_thrs <- c(0.33,0.66)\n\n# Initial parameters (modifiable by the user)\nys <- c(2019:2021) # Last three years of the time series\nAREA <- 18 # Geographic Sub-Area (set to NA for no filtering)\n\nlitter_category <- \"FR\" # Litter category\nresponse <- \"kg_km2\"\nresponse_name <- \"kg/km2\"\n\n# set results directory\nwd <- \"D:\\\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\\\SEAwise\\\\_____ARTICOLO_LITTER\\\\___Analysis_2025___\\\\Litter_SEAwise_quarto\"\nresdir <- file.path(wd, \"output\")\nsuppressWarnings(dir.create(resdir))\n\n# set directory with data\ndata_dir <- file.path(wd, \"input\")\n\n```\n\n## Litter data\n\n### Load litter data\n\nThe script loads the litter dataset corresponding to the selected category and response variable. The data are filtered by the chosen years, and a unique cell identifier is created by combining the c-square code with the year.\n\n```{r, warning=FALSE, message=FALSE}\nlitter_file <- paste0(\"Litter_\",litter_category,\"_\",response,\"_1.csv\") # Litter data file\nlitter <- read.csv(file.path(resdir, litter_file), sep = \";\")\ncells <- unique(litter$id)\nlitter <- litter[litter$year %in% ys, ]\nlitter$id <- paste(litter$c_square, litter$year, sep = \"_\")\n```\n\n### Grid preparation\n\nThe grid data are imported and, if specified, filtered by the selected *AREA*. The grid is then expanded to cover all years of interest, and each cell is assigned a unique identifier (c_square + year). Litter predictions are merged with the grid, missing values are set to zero, and the data are aggregated by spatial cell. The resulting dataset contains mean litter values per cell, stored under the selected litter category.\n\n```{r, warning=FALSE, message=FALSE}\n\n# Load grid data\ngrid <- read.csv(file.path(data_dir, \"grid_0.05_(0-800m)_GSA_csquare.csv\"), sep = \";\")\ncolnames(grid) <- c(\"id\", \"c_square\", \"x\", \"y\", \"AREA\", \"depth\", \"strata\")\n# Filter grid by AREA if AREA is not NA\nif (!is.na(AREA)) {\n  grid <- grid[grid$AREA %in% AREA, ]\n}\n\n# Expand grid for all selected years\nfor (i in 1:length(ys)) {\n  gtemp <- grid\n  gtemp$year <- ys[i]\n  if (i == 1) {\n    g <- gtemp\n  } else {\n    g <- rbind(g, gtemp)\n  }\n}\ngrid <- g\nid <- paste(grid$c_square, grid$year, sep = \"_\")\ngrid$id <- id\n\ngel <- merge(grid, litter[, c(\"id\", \"pred\")], by.x = \"id\", by.y = \"id\", all.x = TRUE)\ngel$pred[is.na(gel$pred)] <- 0 # Fill missing litter data with 0\n\n# Dynamically summarize columns in `fleets` and the `pred` column\ndata <- gel %>% \n  group_by(c_square, x, y, AREA, depth, strata) %>% \n  summarise(litter = mean(pred, na.rm = TRUE), # Summarize pred column\n    .groups = \"drop\" # Optional: drop grouping after summarization\n  )\n\n# Rename the last column to the litter category\ncolnames(data) <- c(\"c_square\", \"x\", \"y\", \"AREA\", \"depth\", \"strata\", litter_category)\n```\n\n### Plot of litter distribution\n\nThe script visualizes the spatial distribution of fishery-related litter. Litter values are normalized to a 0–1 scale, and distribution maps are produced. The plots display relative abundance or mass, depending on the selected response variable.\n\n```{r, warning=FALSE, message=FALSE}\n\n# plot effort\nxmin <- min(data$x)\nxmax <- max(data$x)\nymin <- min(data$y)\nymax <- max(data$y)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\nworld <- map_data(\"world\")\n\n# Rescaled in 0-1 range\ndata[, litter_category] <- (data[, litter_category] - min(data[, litter_category], na.rm = TRUE)) / \n                           (max(data[, litter_category], na.rm = TRUE) - min(data[, litter_category], na.rm = TRUE))\n\ntype <- ifelse(response==\"n_km2\",\"abundance\", \"mass\")\n\nggplot() +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(data = data, aes_string(x = \"x\", y = \"y\", fill = litter_category)) +\n    scale_fill_viridis_c(option = \"D\", direction = -1) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n    theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n    )+\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    labs(fill = paste(\"Relative\",type, sep = \" \")) +\n    ggtitle(paste0())\n\n```\n\n## Species data\n\nThe script imports species-specific abundance/biomass data (n/km^2^) for selected species (e.g., European hake – HKE, red mullet – MUT), stored in the *data_dir* folder. For each species, data are filtered by year, averaged across spatial cells, and normalized to a 0–1 range. The number of species included in the analysis can be modified by updating the variables *species_files* and *species_names* accordingly. These datasets are then merged with the litter data, and a combined multispecies index (SP) is calculated by summing the normalized abundances and rescaling the result.\n\n```{r, warning=FALSE, message=FALSE}\n\n# Define species file names and column names dynamically\nspecies_files <- c(\"HKE_GSA18_(abundance)_0.05.csv\", \"MUT_GSA18_(abundance)_0.05.csv\") # Add more files here  #\nspecies_names <- c(\"HKE\", \"MUT\") # Add corresponding species names here  \n\n# Prepare data for each species\nspecies_data <- list()\ni=1\nfor (i in seq_along(species_files)) {\n  sp <- read.table(file.path(data_dir, species_files[i]), sep = \";\", header = TRUE)\n  sp <- sp[sp$year %in% ys, c(\"c_square\", \"year\", \"pred\")]\n  sp <- sp %>% group_by(c_square) %>% summarise(pred = mean(pred, na.rm = TRUE))\n  colnames(sp)[ncol(sp)] <- species_names[i]\n  # Rescaled in 0-1 range\n  sp[,species_names[i]] <- sp[,species_names[i]] / max(sp[,species_names[i]], na.rm=TRUE )\n  species_data[[i]] <- sp\n}\n\n# Merge species data with the main data\nfor (sp_data in species_data) {\n  data <- merge(data, sp_data, by = \"c_square\", all.x = TRUE)\n}\n\n# Calculate combined species abundance (e.g., mean or sum across all species)\nif (length(species_names)==1) {\n  data$SP <- data[, species_names]\n} else {\n  data$SP <- rowSums(data[, species_names], na.rm = TRUE) # Change to rowMeans if needed\n}\n# Final data ready for analysis\ndata$SP <- data$SP / max(data$SP, na.rm=TRUE)\n```\n\n### Plot species distribution\n\nThis step visualizes the spatial distribution of each species included in the analysis, as well as the aggregated multispecies index. For each species, relative abundance maps are generated using a gradient scale, while the multispecies cumulative index is plotted with thresholds highlighting different quantile levels. These maps provide a spatial overview of single-species patterns and cumulative patterns too.\n\n```{r, warning=FALSE, message=FALSE}\n# Define custom titles for each column\ntitle_mapping <- list(\n  \"HKE\" = \"European hake (HKE)\",\n  \"MUT\" = \"Red mullet (MUT)\",\n  \"SP\" = \"Multispecies abundance index\" # always keep this category\n)\n\n# Define plot limits and breaks\nxmin <- min(data$x, na.rm = TRUE)\nxmax <- max(data$x, na.rm = TRUE)\nymin <- min(data$y, na.rm = TRUE)\nymax <- max(data$y, na.rm = TRUE)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\n# Load world map data\nworld <- map_data(\"world\")\n\n# List of columns to plot (species and aggregated data)\ncolumns_to_plot <- c(species_names, \"SP\") # `species_names` contains names of individual species\ndata$SP[is.nan(data$SP)] <- NA\ndata$SPnorm <- data$SP / max(data$SP, na.rm=TRUE)\n\n# Define global min and max across species and aggregated data\nglobal_min <- min(sapply(columns_to_plot, function(col) min(data[[col]], na.rm = TRUE)))\nglobal_max <- max(sapply(columns_to_plot, function(col) max(data[[col]], na.rm = TRUE)))\n\nmuted_colors <- c(\"#eaf3fc\", \"#c7dffc\", \"#94c1f0\", \"#5a9bd6\", \"#2c7bb6\")\n\n# Generate maps for each species and the aggregated data\nfor (col_name in columns_to_plot) {\n  # Calculate local min and max for the column\n  local_min <- min(data[[col_name]], na.rm = TRUE)\n  local_max <- max(data[[col_name]], na.rm = TRUE)\n  \n  # Get the title for the current column\n  plot_title <- title_mapping[[col_name]] # Map column to title\n  \n  p <- ggplot() +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(data = data[!is.na(data[[col_name]]), ], # Exclude NA values for the column\n              aes_string(x = \"x\", y = \"y\", fill = col_name)) +\n    scale_fill_gradientn(\n      colors = muted_colors, # Use the muted palette\n      name = \"relative abundance\", # Consistent legend title\n      trans = \"sqrt\", # Transformation for better visual spread\n      limits = c(local_min, local_max), # Local scale for each map\n      na.value = \"white\" # Handle NA values with white\n    ) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n  theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n  )+\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    ggtitle(plot_title) # Use custom title\n  print(p)\n}\n\n\n  p <- ggplot() +\n  coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n  geom_tile(data = data[!is.na(data[[\"SPnorm\"]]), ], # Exclude NA values for the column\n            aes_string(x = \"x\", y = \"y\", fill = \"SPnorm\")) +\n  scale_fill_gradientn(\n    colors = c(\"#92d050\", \"#ffff00\", \"#ffc000\"), # Custom three-color scale\n    breaks = c(0, hazard_thrs[1], hazard_thrs[2], 1), # Custom breaks\n    limits = c(0, 1), # Ensure scale goes from 0 to 1\n    labels = c(\"0\", as.character(hazard_thrs[1]), as.character(hazard_thrs[2]), \"1\"), # Custom labels\n    name = \"quantiles\" # Legend title\n  ) +\n  scale_x_continuous(breaks = x_breaks) +\n  scale_y_continuous(breaks = y_breaks) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n  theme_bw() +\n  theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n  )+\n  xlab(\"Longitude\") +\n  ylab(\"Latitude\") +\n  ggtitle(paste0(\"Multispecies cumulative abundance\")) # Dynamically set title based on column name\n  print(p)\n  \n```\n\n# Hazard estimation\n\nThis section classifies the study area into hazard levels based on fishery-related litter mass. The 33^rd^ and 66^th^ percentiles, defined above, are used as thresholds to distinguish low, medium, and high hazard categories by default. Each spatial cell is assigned to one of these categories, and the results are visualized in a hazard map showing the spatial distribution of hazard across the area.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Define thresholds dynamically based on the litter category\nlitter_column <- litter_category # Use the defined litter category dynamically\nq1 <- quantile(data[[litter_column]], hazard_thrs[1], na.rm = TRUE) # Threshold for Medium risk areas\nq2 <- quantile(data[[litter_column]], hazard_thrs[2], na.rm = TRUE) # Threshold for High risk areas\n\n# Assign hazard categories\ndata$Hazard <- 0 # Default: Low risk\ndata[q1 < data[[litter_column]] & data[[litter_column]] <= q2, \"Hazard\"] <- 1 # Medium Hazard\ndata[data[[litter_column]] > q2, \"Hazard\"] <- 2 # High Hazard\n\n# Create a raster from the Hazard column\nr <- raster::rasterFromXYZ(data[, c(\"x\", \"y\", \"Hazard\")])\n\n# Convert raster to data frame for plotting\nr_df <- as.data.frame(r, xy = TRUE) \nr_df <- r_df[!is.na(r_df$Hazard), ] # Exclude NA values\nr_df$Hazard <- factor(r_df$Hazard, levels = 0:2) # Ensure proper factor levels\n\n# Plot hazard Categories\nsuppressWarnings(\n  ggplot() + \n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_raster(data = r_df, aes(x = x, y = y, fill = Hazard)) +\n    scale_fill_manual(values = c(\"#92d050\",\"#ffff00\",\"#ffc000\"), breaks = 0:2,\n                      labels = c(\"Low\", \"Medium\", \"High\")) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), \n                 fill = \"lightgrey\", color = \"darkgrey\") +\n    labs(fill=\"Hazard\")+\n    xlab(\"Longitude\") + \n    ylab(\"Latitude\") +\n    ggtitle(\"Hazard\")+\n    theme(axis.text.x = element_text(size = 14),\n        axis.text.y = element_text(size = 14),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.text = element_text(size = 11),\n        legend.title = element_text(size = 14))\n)\n\n```\n\n\n# Risk classification\n\nThis section integrates hazard levels with multispecies abundance to assess overall exposure risk. Percentile ranks of the multispecies index (SP) are combined with hazard classes (0 = Low, 1 = Medium, 2 = High) to assign each spatial cell to one of three exposure categories:\n\n[Low]{.underline}:\n\n-   Hazard = Low (0), regardless of species abundance;\n\n-   Hazard = Medium (1) with SP ≤ 66^th^ percentile;\n\n-   Hazard = High (2) with SP ≤ 33^rd^ percentile.\n\n[Medium]{.underline}:\n\n-   Hazard = Medium (1) with SP \\> 66^th^ percentile;\n\n-   Hazard = High (2) with 33^rd^ \\< SP ≤ 66^th^ percentile.\n\n[High]{.underline}:\n\n-   Hazard = High (2) with SP \\> 66^th^ percentile.\n\nThe resulting classification is visualized on a risk exposure map, highlighting areas where high litter hazard overlaps with higher biological importance.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Compute percentiles for the column SP in the dataframe 'data'\ndata$SP_perc <- ecdf(data$SP)(data$SP) * 100\ndata$Exposure <- 0\n\ndata[(data$Hazard == 2 & data$SP_perc <= 33) | (data$Hazard == 1 & data$SP_perc <= 66) | (data$Hazard == 0), \"Exposure\" ] <- \"Low\"\n\ndata[(data$Hazard == 2 & (data$SP_perc > 33  & data$SP_perc <= 66)) | (data$Hazard == 1 & data$SP_perc > 66) , \"Exposure\" ] <- \"Medium\"\n\ndata[(data$Hazard == 2 & data$SP_perc > 66) , \"Exposure\" ] <- \"High\"\ndata$Exposure <- as.factor(as.character(data$Exposure))\ndata$Exposure <- factor(data$Exposure ,levels = c(\"Low\",\"Medium\",\"High\"))\n\nExposure_colors <- \n  c(\"Low\" = \"cornflowerblue\",\n  \"Medium\" = \"yellow\",\n  \"High\" = \"indianred1\")\n\n# Plot Exposure with discrete scale\nggplot() +\n  coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n  geom_tile(data = data, # Exclude NA values\n            aes(x = x, y = y, fill = Exposure)) +\n  scale_fill_manual(\n    values = Exposure_colors, # Define discrete colors\n    name = \"Exposure\" # Legend title\n  ) +\n  scale_x_continuous(breaks = x_breaks) +\n  scale_y_continuous(breaks = y_breaks) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(size = 14),\n        axis.text.y = element_text(size = 14),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.text = element_text(size = 11),\n        legend.title = element_text(size = 14)) +\n  xlab(\"Longitude\") +\n  ylab(\"Latitude\") +\n  ggtitle(\"Exposure\") # Dynamically set title based on column name\n```\n\n# Impact classification\n\nIn the final step, the script translates exposure levels into fleet-specific impact maps. For each fishing fleet, the assigned impact level (Low, Medium, High) is combined with the exposure categories to produce a spatial classification, as decribed in the table below.\n\n```{r, echo=FALSE}\nmat <- tribble(\n  ~gear, ~risk, ~impact,\n  0,     0,     0,\n  0,     1,     0,\n  0,     2,     0,\n  1,     0,     0,\n  1,     1,     0,\n  1,     2,     1,\n  2,     0,     0,\n  2,     1,     1,\n  2,     2,     2\n)\n\nimpact_cols <- c(\"0\"=\"#92d050\",\"1\"=\"#ffff00\",\"2\"=\"#ffc000\")\nmat$impact <- factor(mat$impact, levels=c(0,1,2))\n\nggplot(mat, aes(x = factor(risk), y = factor(gear, levels = rev(c(0,1,2))), fill = impact)) +\n  geom_tile(color = \"grey50\", linewidth = 0.5) +\n  geom_text(aes(label = as.character(impact)), size = 5) +\n  scale_fill_manual(values = impact_cols, guide = \"none\") +\n  scale_x_discrete(position = \"top\") +\n  labs(\n    x = \"Space and time — Scale: 0 = low risk, 1 = Medium risk, 2 = High risk.\",\n    y = \"Gear — Scale: \\n0 = low impact, \\n1 = Medium impact, \\n2 = High impact.\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title.x.top = element_text(margin = margin(b = 10), size = 13),\n    axis.title.y = element_text(margin = margin(r = 10), size = 13),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14),\n  )\n```\n\nThe resulting impact values are visualized in dedicated maps for each fleet, highlighting spatial patterns of potential fleet-related impacts.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Generalize impact classification for each fleet using the `Exposure` column\nfor (i in seq_len(nrow(fleet_table))) {\n  fleet_code <- fleet_table$fleet_code[i]\n  fleet_name <- fleet_table$fleet_name[i]\n  fleet_impact <- fleet_table$fleet_impact[i]\n  \n  # Dynamically create column names\n  impact_col <- paste0(\"Impact_\", fleet_code)\n  \n  # Initialize the impact column\n  data[[impact_col]] <- \"Low\"\n  \n    data[[impact_col]] <- as.character(data[[impact_col]])\n    data[[\"Exposure\"]] <- as.character(data[[\"Exposure\"]])\n  \n  # Assign impact values based on the fleet's impact level and the overall `Exposure` column\n  if (fleet_impact == \"Low\") {\n    data[[impact_col]] <- \"Low\" # All values remain 0\n  } else if (fleet_impact == \"Medium\") {\n    data[data$Exposure == \"High\", impact_col] <- \"Medium\"\n  } else if (fleet_impact == \"High\") {\n    data[data$Exposure == \"Medium\", impact_col] <- \"Medium\"\n    data[data$Exposure == \"High\", impact_col] <- \"High\"\n  }\n  \n  # Convert impact column to a factor for plotting\n  data[[impact_col]] <- as.factor(data[[impact_col]])\n}\n\n# Define colors for the map\nImpact_colors <- c(\"Low\" = \"#92d050\", \"Medium\" = \"#ffff00\", \"High\" = \"#ffc000\")\n\n# Calculate axis limits and breaks\nxmin <- min(data$x, na.rm = TRUE)\nxmax <- max(data$x, na.rm = TRUE)\nymin <- min(data$y, na.rm = TRUE)\nymax <- max(data$y, na.rm = TRUE)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\n# Load world data for map overlay\nworld <- map_data(\"world\")\n\n# Plot impact maps for each fleet\nfor (i in seq_len(nrow(fleet_table))) {\n  fleet_code <- fleet_table$fleet_code[i]\n  fleet_name <- fleet_table$fleet_name[i]\n  impact_col <- paste0(\"Impact_\", fleet_code)\n  \n  pi <- ggplot(data) +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(aes(x = x, y = y, fill = !!sym(impact_col))) + # Dynamically use the impact column\n    scale_fill_manual(values = Impact_colors, name = paste(\"Impact (\", fleet_code, \")\", sep = \"\")) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n    theme(axis.text.x = element_text(size = 14),\n          axis.text.y = element_text(size = 14),\n          axis.title.x = element_text(size = 14),\n          axis.title.y = element_text(size = 14),\n          legend.text = element_text(size = 11),\n          legend.title = element_text(size = 14)) +\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    ggtitle(paste(\"Impact Map for \", fleet_name, sep = \"\"))\n  print(pi)\n}\n\n```\n","srcMarkdownNoYaml":"\n\n```{r, echo=FALSE}\n# stampa la data/ora di compilazione in stile Rmd originale\ncat(sprintf(\"Compiled on %s\\n\\n\", format(Sys.time(), '%d/%m/%Y, %H:%M')))\n```\n\n<!-- Logo in the title -->\n\n<style>\n/* Make the title line a flex row with the logo on the left */\n.title-with-logo {\n  display: flex;\n  align-items: center;\n  gap: 14px;              /* spacing between logo and text */\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n.title-with-logo img {\n  width: 120px;           /* adjust logo size as needed */\n  height: auto;\n}\n</style>\n\n<script>\n// Wrap the H1.title with a container and prepend the logo to its left\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  // find the auto-generated title element\n  var h1 = document.querySelector(\"h1.title\");\n  if(!h1) return;\n\n  // create wrapper\n  var wrap = document.createElement(\"div\");\n  wrap.className = \"title-with-logo\";\n\n  // create logo\n  var img = document.createElement(\"img\");\n  img.src = \"pics/SeaWiseFinal-01.png\";   // relative path from Rmd root\n  img.alt = \"SEAwise logo\";\n\n  // insert: wrap replaces h1, then put logo + h1 inside wrap\n  h1.parentNode.insertBefore(wrap, h1);\n  wrap.appendChild(img);\n  wrap.appendChild(h1);\n});\n</script>\n\n<!-- Links -->\n\n<div id=\"header-links\">\n  <a href=\"https://seawiseproject.org/\" target=\"_blank\">\n    <img src=\"pics/SeaWiseFinal-01.png\" width=\"20\"  height=\"22\" style=\"margin-right:6px; vertical-align:middle;\">\n    SEAwise Website\n  </a>\n  <a href=\"https://github.com/COISPA/litter\" target=\"_blank\">\n    <img src=\"pics/github.svg\" width=\"20\" height=\"22\" style=\"margin-right:6px; vertical-align:middle;\">\n    COISPA Github\n  </a>\n</div>\n\n<!-- start of the script -->\n\n\n# Data preparation\n\nThe script begins by preparing the working environment. All existing variables are cleared, and the required libraries for data manipulation and visualization are loaded. Two reference tables are then defined:\n\n-   Litter categories table (cats): lists the different categories of marine litter considered in the analysis, each with a short code (cats) and a descriptive label (cats_names).\n\n-   Fleet table (fleet_table): contains the fishing fleets included in the study, specifying their codes, full names, and associated impact levels (Low, Medium, High).\n\n```{r, warning=FALSE, message=FALSE}\n#| code-fold: true\n#| echo: true\n\n# Clean the environment\nrm(list = ls(all = TRUE))\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(raster)\nlibrary(dplyr)\nlibrary(tidyr)\n\ncats <- data.frame(\n  cats=c(\"ADV\",\"INGFB\",\"INGSC\",\"ENT\",\"FR\",\n         \"SUP\",\"Plastic\",\"Rubber\",\"Metal\",\n         \"Glass\",\"Natural\",\"Other\"),\n  cats_names=c(\"Advection\",\n               \"Ingestion fish and birds\",\n               \"Ingestion sharks and cetaceans\", \n               \"Entanglement\", \n               \"Fishing related\",\n               \"SUP\",\n               \"Plastic\",\n               \"Rubber\",\n               \"Metal\",\n               \"Glass\",\n               \"Natural\",\n               \"Other\"))\n\n# Define fleet table with impact levels\nfleet_table <- data.frame(\n  fleet_code = c(\"PS\", \"Trawls\", \"SSF\"),\n  fleet_name = c(\"Purse Seiners\", \"Trawls\", \"Small-Scale Fisheries\"),\n  fleet_impact = c(\"Low\", \"Medium\", \"High\")\n)\n```\n\nAfter preparing the environment, the script defines a set of global parameters that control the subsequent analysis. These include: - Hazard thresholds (hazard_thrs): values used to classify the level of risk into low, medium, and high categories. - Years of interest (ys): the temporal window considered for the analysis, by default set to the last three years of the available time series. - AREA: the spatial domain of the analysis, which can be restricted to a specific GSA, subregion etc. or left unfiltered (NA).The user must also select the litter category to be analysed. By default, the script processes marine litter data expressed as mass density (kg/km²), although alternative settings can be specified through the variables *response* and *response_name*.\n\nFinally, the script requires the definition of file paths: - a directory for storing the results of the analysis (resdir), which is automatically created if not already present, - and the directory containing the input data (data_dir).\n\n```{r, warning=FALSE, message=FALSE}\nhazard_thrs <- risk_thrs <- c(0.33,0.66)\n\n# Initial parameters (modifiable by the user)\nys <- c(2019:2021) # Last three years of the time series\nAREA <- 18 # Geographic Sub-Area (set to NA for no filtering)\n\nlitter_category <- \"FR\" # Litter category\nresponse <- \"kg_km2\"\nresponse_name <- \"kg/km2\"\n\n# set results directory\nwd <- \"D:\\\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\\\SEAwise\\\\_____ARTICOLO_LITTER\\\\___Analysis_2025___\\\\Litter_SEAwise_quarto\"\nresdir <- file.path(wd, \"output\")\nsuppressWarnings(dir.create(resdir))\n\n# set directory with data\ndata_dir <- file.path(wd, \"input\")\n\n```\n\n## Litter data\n\n### Load litter data\n\nThe script loads the litter dataset corresponding to the selected category and response variable. The data are filtered by the chosen years, and a unique cell identifier is created by combining the c-square code with the year.\n\n```{r, warning=FALSE, message=FALSE}\nlitter_file <- paste0(\"Litter_\",litter_category,\"_\",response,\"_1.csv\") # Litter data file\nlitter <- read.csv(file.path(resdir, litter_file), sep = \";\")\ncells <- unique(litter$id)\nlitter <- litter[litter$year %in% ys, ]\nlitter$id <- paste(litter$c_square, litter$year, sep = \"_\")\n```\n\n### Grid preparation\n\nThe grid data are imported and, if specified, filtered by the selected *AREA*. The grid is then expanded to cover all years of interest, and each cell is assigned a unique identifier (c_square + year). Litter predictions are merged with the grid, missing values are set to zero, and the data are aggregated by spatial cell. The resulting dataset contains mean litter values per cell, stored under the selected litter category.\n\n```{r, warning=FALSE, message=FALSE}\n\n# Load grid data\ngrid <- read.csv(file.path(data_dir, \"grid_0.05_(0-800m)_GSA_csquare.csv\"), sep = \";\")\ncolnames(grid) <- c(\"id\", \"c_square\", \"x\", \"y\", \"AREA\", \"depth\", \"strata\")\n# Filter grid by AREA if AREA is not NA\nif (!is.na(AREA)) {\n  grid <- grid[grid$AREA %in% AREA, ]\n}\n\n# Expand grid for all selected years\nfor (i in 1:length(ys)) {\n  gtemp <- grid\n  gtemp$year <- ys[i]\n  if (i == 1) {\n    g <- gtemp\n  } else {\n    g <- rbind(g, gtemp)\n  }\n}\ngrid <- g\nid <- paste(grid$c_square, grid$year, sep = \"_\")\ngrid$id <- id\n\ngel <- merge(grid, litter[, c(\"id\", \"pred\")], by.x = \"id\", by.y = \"id\", all.x = TRUE)\ngel$pred[is.na(gel$pred)] <- 0 # Fill missing litter data with 0\n\n# Dynamically summarize columns in `fleets` and the `pred` column\ndata <- gel %>% \n  group_by(c_square, x, y, AREA, depth, strata) %>% \n  summarise(litter = mean(pred, na.rm = TRUE), # Summarize pred column\n    .groups = \"drop\" # Optional: drop grouping after summarization\n  )\n\n# Rename the last column to the litter category\ncolnames(data) <- c(\"c_square\", \"x\", \"y\", \"AREA\", \"depth\", \"strata\", litter_category)\n```\n\n### Plot of litter distribution\n\nThe script visualizes the spatial distribution of fishery-related litter. Litter values are normalized to a 0–1 scale, and distribution maps are produced. The plots display relative abundance or mass, depending on the selected response variable.\n\n```{r, warning=FALSE, message=FALSE}\n\n# plot effort\nxmin <- min(data$x)\nxmax <- max(data$x)\nymin <- min(data$y)\nymax <- max(data$y)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\nworld <- map_data(\"world\")\n\n# Rescaled in 0-1 range\ndata[, litter_category] <- (data[, litter_category] - min(data[, litter_category], na.rm = TRUE)) / \n                           (max(data[, litter_category], na.rm = TRUE) - min(data[, litter_category], na.rm = TRUE))\n\ntype <- ifelse(response==\"n_km2\",\"abundance\", \"mass\")\n\nggplot() +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(data = data, aes_string(x = \"x\", y = \"y\", fill = litter_category)) +\n    scale_fill_viridis_c(option = \"D\", direction = -1) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n    theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n    )+\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    labs(fill = paste(\"Relative\",type, sep = \" \")) +\n    ggtitle(paste0())\n\n```\n\n## Species data\n\nThe script imports species-specific abundance/biomass data (n/km^2^) for selected species (e.g., European hake – HKE, red mullet – MUT), stored in the *data_dir* folder. For each species, data are filtered by year, averaged across spatial cells, and normalized to a 0–1 range. The number of species included in the analysis can be modified by updating the variables *species_files* and *species_names* accordingly. These datasets are then merged with the litter data, and a combined multispecies index (SP) is calculated by summing the normalized abundances and rescaling the result.\n\n```{r, warning=FALSE, message=FALSE}\n\n# Define species file names and column names dynamically\nspecies_files <- c(\"HKE_GSA18_(abundance)_0.05.csv\", \"MUT_GSA18_(abundance)_0.05.csv\") # Add more files here  #\nspecies_names <- c(\"HKE\", \"MUT\") # Add corresponding species names here  \n\n# Prepare data for each species\nspecies_data <- list()\ni=1\nfor (i in seq_along(species_files)) {\n  sp <- read.table(file.path(data_dir, species_files[i]), sep = \";\", header = TRUE)\n  sp <- sp[sp$year %in% ys, c(\"c_square\", \"year\", \"pred\")]\n  sp <- sp %>% group_by(c_square) %>% summarise(pred = mean(pred, na.rm = TRUE))\n  colnames(sp)[ncol(sp)] <- species_names[i]\n  # Rescaled in 0-1 range\n  sp[,species_names[i]] <- sp[,species_names[i]] / max(sp[,species_names[i]], na.rm=TRUE )\n  species_data[[i]] <- sp\n}\n\n# Merge species data with the main data\nfor (sp_data in species_data) {\n  data <- merge(data, sp_data, by = \"c_square\", all.x = TRUE)\n}\n\n# Calculate combined species abundance (e.g., mean or sum across all species)\nif (length(species_names)==1) {\n  data$SP <- data[, species_names]\n} else {\n  data$SP <- rowSums(data[, species_names], na.rm = TRUE) # Change to rowMeans if needed\n}\n# Final data ready for analysis\ndata$SP <- data$SP / max(data$SP, na.rm=TRUE)\n```\n\n### Plot species distribution\n\nThis step visualizes the spatial distribution of each species included in the analysis, as well as the aggregated multispecies index. For each species, relative abundance maps are generated using a gradient scale, while the multispecies cumulative index is plotted with thresholds highlighting different quantile levels. These maps provide a spatial overview of single-species patterns and cumulative patterns too.\n\n```{r, warning=FALSE, message=FALSE}\n# Define custom titles for each column\ntitle_mapping <- list(\n  \"HKE\" = \"European hake (HKE)\",\n  \"MUT\" = \"Red mullet (MUT)\",\n  \"SP\" = \"Multispecies abundance index\" # always keep this category\n)\n\n# Define plot limits and breaks\nxmin <- min(data$x, na.rm = TRUE)\nxmax <- max(data$x, na.rm = TRUE)\nymin <- min(data$y, na.rm = TRUE)\nymax <- max(data$y, na.rm = TRUE)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\n# Load world map data\nworld <- map_data(\"world\")\n\n# List of columns to plot (species and aggregated data)\ncolumns_to_plot <- c(species_names, \"SP\") # `species_names` contains names of individual species\ndata$SP[is.nan(data$SP)] <- NA\ndata$SPnorm <- data$SP / max(data$SP, na.rm=TRUE)\n\n# Define global min and max across species and aggregated data\nglobal_min <- min(sapply(columns_to_plot, function(col) min(data[[col]], na.rm = TRUE)))\nglobal_max <- max(sapply(columns_to_plot, function(col) max(data[[col]], na.rm = TRUE)))\n\nmuted_colors <- c(\"#eaf3fc\", \"#c7dffc\", \"#94c1f0\", \"#5a9bd6\", \"#2c7bb6\")\n\n# Generate maps for each species and the aggregated data\nfor (col_name in columns_to_plot) {\n  # Calculate local min and max for the column\n  local_min <- min(data[[col_name]], na.rm = TRUE)\n  local_max <- max(data[[col_name]], na.rm = TRUE)\n  \n  # Get the title for the current column\n  plot_title <- title_mapping[[col_name]] # Map column to title\n  \n  p <- ggplot() +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(data = data[!is.na(data[[col_name]]), ], # Exclude NA values for the column\n              aes_string(x = \"x\", y = \"y\", fill = col_name)) +\n    scale_fill_gradientn(\n      colors = muted_colors, # Use the muted palette\n      name = \"relative abundance\", # Consistent legend title\n      trans = \"sqrt\", # Transformation for better visual spread\n      limits = c(local_min, local_max), # Local scale for each map\n      na.value = \"white\" # Handle NA values with white\n    ) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n  theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n  )+\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    ggtitle(plot_title) # Use custom title\n  print(p)\n}\n\n\n  p <- ggplot() +\n  coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n  geom_tile(data = data[!is.na(data[[\"SPnorm\"]]), ], # Exclude NA values for the column\n            aes_string(x = \"x\", y = \"y\", fill = \"SPnorm\")) +\n  scale_fill_gradientn(\n    colors = c(\"#92d050\", \"#ffff00\", \"#ffc000\"), # Custom three-color scale\n    breaks = c(0, hazard_thrs[1], hazard_thrs[2], 1), # Custom breaks\n    limits = c(0, 1), # Ensure scale goes from 0 to 1\n    labels = c(\"0\", as.character(hazard_thrs[1]), as.character(hazard_thrs[2]), \"1\"), # Custom labels\n    name = \"quantiles\" # Legend title\n  ) +\n  scale_x_continuous(breaks = x_breaks) +\n  scale_y_continuous(breaks = y_breaks) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n  theme_bw() +\n  theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n  )+\n  xlab(\"Longitude\") +\n  ylab(\"Latitude\") +\n  ggtitle(paste0(\"Multispecies cumulative abundance\")) # Dynamically set title based on column name\n  print(p)\n  \n```\n\n# Hazard estimation\n\nThis section classifies the study area into hazard levels based on fishery-related litter mass. The 33^rd^ and 66^th^ percentiles, defined above, are used as thresholds to distinguish low, medium, and high hazard categories by default. Each spatial cell is assigned to one of these categories, and the results are visualized in a hazard map showing the spatial distribution of hazard across the area.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Define thresholds dynamically based on the litter category\nlitter_column <- litter_category # Use the defined litter category dynamically\nq1 <- quantile(data[[litter_column]], hazard_thrs[1], na.rm = TRUE) # Threshold for Medium risk areas\nq2 <- quantile(data[[litter_column]], hazard_thrs[2], na.rm = TRUE) # Threshold for High risk areas\n\n# Assign hazard categories\ndata$Hazard <- 0 # Default: Low risk\ndata[q1 < data[[litter_column]] & data[[litter_column]] <= q2, \"Hazard\"] <- 1 # Medium Hazard\ndata[data[[litter_column]] > q2, \"Hazard\"] <- 2 # High Hazard\n\n# Create a raster from the Hazard column\nr <- raster::rasterFromXYZ(data[, c(\"x\", \"y\", \"Hazard\")])\n\n# Convert raster to data frame for plotting\nr_df <- as.data.frame(r, xy = TRUE) \nr_df <- r_df[!is.na(r_df$Hazard), ] # Exclude NA values\nr_df$Hazard <- factor(r_df$Hazard, levels = 0:2) # Ensure proper factor levels\n\n# Plot hazard Categories\nsuppressWarnings(\n  ggplot() + \n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_raster(data = r_df, aes(x = x, y = y, fill = Hazard)) +\n    scale_fill_manual(values = c(\"#92d050\",\"#ffff00\",\"#ffc000\"), breaks = 0:2,\n                      labels = c(\"Low\", \"Medium\", \"High\")) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), \n                 fill = \"lightgrey\", color = \"darkgrey\") +\n    labs(fill=\"Hazard\")+\n    xlab(\"Longitude\") + \n    ylab(\"Latitude\") +\n    ggtitle(\"Hazard\")+\n    theme(axis.text.x = element_text(size = 14),\n        axis.text.y = element_text(size = 14),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.text = element_text(size = 11),\n        legend.title = element_text(size = 14))\n)\n\n```\n\n\n# Risk classification\n\nThis section integrates hazard levels with multispecies abundance to assess overall exposure risk. Percentile ranks of the multispecies index (SP) are combined with hazard classes (0 = Low, 1 = Medium, 2 = High) to assign each spatial cell to one of three exposure categories:\n\n[Low]{.underline}:\n\n-   Hazard = Low (0), regardless of species abundance;\n\n-   Hazard = Medium (1) with SP ≤ 66^th^ percentile;\n\n-   Hazard = High (2) with SP ≤ 33^rd^ percentile.\n\n[Medium]{.underline}:\n\n-   Hazard = Medium (1) with SP \\> 66^th^ percentile;\n\n-   Hazard = High (2) with 33^rd^ \\< SP ≤ 66^th^ percentile.\n\n[High]{.underline}:\n\n-   Hazard = High (2) with SP \\> 66^th^ percentile.\n\nThe resulting classification is visualized on a risk exposure map, highlighting areas where high litter hazard overlaps with higher biological importance.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Compute percentiles for the column SP in the dataframe 'data'\ndata$SP_perc <- ecdf(data$SP)(data$SP) * 100\ndata$Exposure <- 0\n\ndata[(data$Hazard == 2 & data$SP_perc <= 33) | (data$Hazard == 1 & data$SP_perc <= 66) | (data$Hazard == 0), \"Exposure\" ] <- \"Low\"\n\ndata[(data$Hazard == 2 & (data$SP_perc > 33  & data$SP_perc <= 66)) | (data$Hazard == 1 & data$SP_perc > 66) , \"Exposure\" ] <- \"Medium\"\n\ndata[(data$Hazard == 2 & data$SP_perc > 66) , \"Exposure\" ] <- \"High\"\ndata$Exposure <- as.factor(as.character(data$Exposure))\ndata$Exposure <- factor(data$Exposure ,levels = c(\"Low\",\"Medium\",\"High\"))\n\nExposure_colors <- \n  c(\"Low\" = \"cornflowerblue\",\n  \"Medium\" = \"yellow\",\n  \"High\" = \"indianred1\")\n\n# Plot Exposure with discrete scale\nggplot() +\n  coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n  geom_tile(data = data, # Exclude NA values\n            aes(x = x, y = y, fill = Exposure)) +\n  scale_fill_manual(\n    values = Exposure_colors, # Define discrete colors\n    name = \"Exposure\" # Legend title\n  ) +\n  scale_x_continuous(breaks = x_breaks) +\n  scale_y_continuous(breaks = y_breaks) +\n  geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n  theme_bw() +\n  theme(axis.text.x = element_text(size = 14),\n        axis.text.y = element_text(size = 14),\n        axis.title.x = element_text(size = 14),\n        axis.title.y = element_text(size = 14),\n        legend.text = element_text(size = 11),\n        legend.title = element_text(size = 14)) +\n  xlab(\"Longitude\") +\n  ylab(\"Latitude\") +\n  ggtitle(\"Exposure\") # Dynamically set title based on column name\n```\n\n# Impact classification\n\nIn the final step, the script translates exposure levels into fleet-specific impact maps. For each fishing fleet, the assigned impact level (Low, Medium, High) is combined with the exposure categories to produce a spatial classification, as decribed in the table below.\n\n```{r, echo=FALSE}\nmat <- tribble(\n  ~gear, ~risk, ~impact,\n  0,     0,     0,\n  0,     1,     0,\n  0,     2,     0,\n  1,     0,     0,\n  1,     1,     0,\n  1,     2,     1,\n  2,     0,     0,\n  2,     1,     1,\n  2,     2,     2\n)\n\nimpact_cols <- c(\"0\"=\"#92d050\",\"1\"=\"#ffff00\",\"2\"=\"#ffc000\")\nmat$impact <- factor(mat$impact, levels=c(0,1,2))\n\nggplot(mat, aes(x = factor(risk), y = factor(gear, levels = rev(c(0,1,2))), fill = impact)) +\n  geom_tile(color = \"grey50\", linewidth = 0.5) +\n  geom_text(aes(label = as.character(impact)), size = 5) +\n  scale_fill_manual(values = impact_cols, guide = \"none\") +\n  scale_x_discrete(position = \"top\") +\n  labs(\n    x = \"Space and time — Scale: 0 = low risk, 1 = Medium risk, 2 = High risk.\",\n    y = \"Gear — Scale: \\n0 = low impact, \\n1 = Medium impact, \\n2 = High impact.\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title.x.top = element_text(margin = margin(b = 10), size = 13),\n    axis.title.y = element_text(margin = margin(r = 10), size = 13),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14),\n  )\n```\n\nThe resulting impact values are visualized in dedicated maps for each fleet, highlighting spatial patterns of potential fleet-related impacts.\n\n```{r, echo=FALSE, warning=FALSE, message=FALSE}\n# Generalize impact classification for each fleet using the `Exposure` column\nfor (i in seq_len(nrow(fleet_table))) {\n  fleet_code <- fleet_table$fleet_code[i]\n  fleet_name <- fleet_table$fleet_name[i]\n  fleet_impact <- fleet_table$fleet_impact[i]\n  \n  # Dynamically create column names\n  impact_col <- paste0(\"Impact_\", fleet_code)\n  \n  # Initialize the impact column\n  data[[impact_col]] <- \"Low\"\n  \n    data[[impact_col]] <- as.character(data[[impact_col]])\n    data[[\"Exposure\"]] <- as.character(data[[\"Exposure\"]])\n  \n  # Assign impact values based on the fleet's impact level and the overall `Exposure` column\n  if (fleet_impact == \"Low\") {\n    data[[impact_col]] <- \"Low\" # All values remain 0\n  } else if (fleet_impact == \"Medium\") {\n    data[data$Exposure == \"High\", impact_col] <- \"Medium\"\n  } else if (fleet_impact == \"High\") {\n    data[data$Exposure == \"Medium\", impact_col] <- \"Medium\"\n    data[data$Exposure == \"High\", impact_col] <- \"High\"\n  }\n  \n  # Convert impact column to a factor for plotting\n  data[[impact_col]] <- as.factor(data[[impact_col]])\n}\n\n# Define colors for the map\nImpact_colors <- c(\"Low\" = \"#92d050\", \"Medium\" = \"#ffff00\", \"High\" = \"#ffc000\")\n\n# Calculate axis limits and breaks\nxmin <- min(data$x, na.rm = TRUE)\nxmax <- max(data$x, na.rm = TRUE)\nymin <- min(data$y, na.rm = TRUE)\nymax <- max(data$y, na.rm = TRUE)\nxl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\nyl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\nx_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\ny_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n\n# Load world data for map overlay\nworld <- map_data(\"world\")\n\n# Plot impact maps for each fleet\nfor (i in seq_len(nrow(fleet_table))) {\n  fleet_code <- fleet_table$fleet_code[i]\n  fleet_name <- fleet_table$fleet_name[i]\n  impact_col <- paste0(\"Impact_\", fleet_code)\n  \n  pi <- ggplot(data) +\n    coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n    geom_tile(aes(x = x, y = y, fill = !!sym(impact_col))) + # Dynamically use the impact column\n    scale_fill_manual(values = Impact_colors, name = paste(\"Impact (\", fleet_code, \")\", sep = \"\")) +\n    scale_x_continuous(breaks = x_breaks) +\n    scale_y_continuous(breaks = y_breaks) +\n    geom_polygon(data = world, aes(x = long, y = lat, group = group), fill = \"lightgrey\", color = \"darkgrey\") +\n    theme_bw() +\n    theme(axis.text.x = element_text(size = 14),\n          axis.text.y = element_text(size = 14),\n          axis.title.x = element_text(size = 14),\n          axis.title.y = element_text(size = 14),\n          legend.text = element_text(size = 11),\n          legend.title = element_text(size = 14)) +\n    xlab(\"Longitude\") +\n    ylab(\"Latitude\") +\n    ggtitle(paste(\"Impact Map for \", fleet_name, sep = \"\"))\n  print(pi)\n}\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":4,"number-sections":false,"include-in-header":["assets/icons.html"],"css":["styles.css"],"output-file":"risk_analysis.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","toc-location":"left","toc-expand":true,"toc-title":"Index","theme":"default","smooth-scroll":true,"title":"Litter risk analysis","author":"M. T. Spedicato, W. Zupa"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}