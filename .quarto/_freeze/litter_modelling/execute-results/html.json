{
  "hash": "0c1ccb32a72f9933415cf3d462fb59bd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Modelling analysis on Litter data\"\nauthor: \"M. T. Spedicato, W. Zupa\"\neditor: \n  markdown: \n    wrap: sentence\n---\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nCompiled on 29/08/2025, 13:34\n```\n\n\n:::\n:::\n\n\n<!-- Logo in the title -->\n\n```{=html}\n<style>\n/* Make the title line a flex row with the logo on the left */\n.title-with-logo {\n  display: flex;\n  align-items: center;\n  gap: 14px;              /* spacing between logo and text */\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n}\n.title-with-logo img {\n  width: 120px;           /* adjust logo size as needed */\n  height: auto;\n}\n</style>\n```\n\n```{=html}\n<script>\n// Wrap the H1.title with a container and prepend the logo to its left\ndocument.addEventListener(\"DOMContentLoaded\", function(){\n  // find the auto-generated title element\n  var h1 = document.querySelector(\"h1.title\");\n  if(!h1) return;\n\n  // create wrapper\n  var wrap = document.createElement(\"div\");\n  wrap.className = \"title-with-logo\";\n\n  // create logo\n  var img = document.createElement(\"img\");\n  img.src = \"pics/SeaWiseFinal-01.png\";   // relative path from Rmd root\n  img.alt = \"SEAwise logo\";\n\n  // insert: wrap replaces h1, then put logo + h1 inside wrap\n  h1.parentNode.insertBefore(wrap, h1);\n  wrap.appendChild(img);\n  wrap.appendChild(h1);\n});\n</script>\n```\n\n<!-- Links -->\n\n::: {#header-links}\n<a href=\"https://seawiseproject.org/\" target=\"_blank\"> <img src=\"pics/SeaWiseFinal-01.png\" width=\"20\" height=\"22\" style=\"margin-right:6px; vertical-align:middle;\"/> SEAwise Website </a> <a href=\"https://github.com/COISPA/litter\" target=\"_blank\"> <img src=\"pics/github.svg\" width=\"20\" height=\"22\" style=\"margin-right:6px; vertical-align:middle;\"/> COISPA Github </a>\n:::\n\n<!-- start of the script -->\n\n# Modelling analysis\n\n![](pics/Figure2.jpg)\n\nBy editing only the small set of parameters that appears at the beginning of the script, such as the study period, the geographical area covered by the analysis, the litter category to be analysed, the response metric and so on, the same code can be rendered for any new case study without further modifications.\nThe template expects two external csv files.\nThe first file contains the observations: one row for every haul, with the haul date, geographical coordinates in decimal degrees, depth, the number and weight of litter items, and either the swept area or the tow duration so that the raw counts can be converted into density indices.\nThe second file is a prediction grid that covers the study region with regularly spaced points; it stores the c-squares cell id, the centroid' coordinates of each grid cell, depth and any stratification label relevant to the survey design.\nThe resolution of the example grid is 0.05° x 0.05° (\\~5 km).\nThese files can be replaced freely by the user.\nBefore the statistical analysis begins the script derives a set of density indices (as items or kilograms per square kilometre and per hour) together with a binary presence–absence flag.\nFor the chosen response variable the code fits three candidate Generalised Additive Models with the mgcv package.\nAll models include a two‑dimensional smooth of longitude and latitude, while the temporal component is represented in three alternative ways: a thin‑plate spline of the continuous time variable, a simple factor that treats the year as a categorical effect, or a linear trend.\nContinuous density responses are modelled with a Tweedie distribution, whereas presence–absence data are handled with a binomial logit.\nPenalised REML estimation is adopted throughout, and an inflation factor of 1.4 is applied to the smoothing penalty to prevent against overfitting.\nModel performance is summarised by the percentage of deviance explained and by the Akaike Information Criterion.\nOnce each model has been fitted the script predicts the response at each point of the grid for every survey year and stores the results as plain text.\nIt also builds annual indices of abundance by resampling from the multivariate normal distribution of the model coefficients, which provide confidence intervals for the trend.\nFigures of the smooth terms, maps of the most recent three‑year average distribution and time‑series plots with confidence envelopes are saved as high‑resolution images, alongside serialised versions of the fitted models and all diagnostic statistics.\nEverything is written to the user‑defined results directory so that raw data, models and graphics remain clearly separated.\nTo use the template the user only needs to supply an csv file of litter observation by category and a compatible prediction grid, modify the parameter block accordingly to those resources and render the document.\nThe code mostly relies exclusively on CRAN packages (lubridate, dplyr, mgcv, mgcViz, ggplot2, MASS, sf and rnaturalearth) so the workflow can be reproduced on any standard R installation.\n\n\n\n# Description of the analysis\n\n## User defined data\n\nIn this section every variable that personalises a run is declared, so that the rest of the script can remain untouched and fully generic.\nFirst, two paths are set—one pointing to the folder where all outputs will be written (*resdir*), the other to the directory that holds the litter data post-classified in csv file format.\nCreating the results folder in advance avoids errors if it does not yet exist.\nNext come the temporal and spatial filters.\n*ys* lists the survey years that should be considered during the analysis, while *AREA* identifies the geographic unit (for instance a GSA or ICES subarea) to be extracted later from both the observation table and the prediction grid.\nThe response metric is chosen with response.\nFive alternative indices are available: densities per square kilometre (*n_km2*, *kg_km2*), per hour (*n_h*, *kg_h*), or simple presence–absence (*pa*).\n*category* variable then tells the script which litter category, among those reclassified, will be isolated from the source data for modelling.\nThree numeric values follow.\n*nBoot* fixes how many Monte-Carlo replicates will be drawn when the script estimates confidence intervals for the annual indices; a larger number increases precision but lengthens computing time.\n*seeds* sets the random-number seed so that results are reproducible.\n*mean_sept_area* provides the mean swept area of a haul for the particular survey consideredin order to be attached to every cell of the prediction grid so that model outputs can be predicted on the same scale as the observations.\nFinally, *ref_month* chooses the calendar month that will define the temporal frame for the prediction grid, allowing the user to centre predictions on the season of interest.\n\n\n::: {.cell paged.print='true'}\n\n```{.r .cell-code}\n# set results directory\nwd <- \"D:\\\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\\\SEAwise\\\\_____ARTICOLO_LITTER\\\\___Analysis_2025___\\\\Litter_SEAwise_quarto\"\nresdir <- file.path(wd, \"output\")\nsuppressWarnings(dir.create(resdir))\n# set directory with data\ndata_dir <- file.path(wd, \"input\")\n\n# set variables\nys <- c(2013:2021,2023,2024) # set the years of data to be used in the analysis\nAREA <- \"18\" # select the geographic area, subarea, GSA for the analysis\nresponse <- \"kg_km2\" # \"n_km2\"  \"kg_km2\" \"n_h\" \"kg_h\" \"pa\"\n\ncategory <- \"FR\"\nnBoot <- 1000 # number of simulation for bootstrapping\nseeds <- 42 # number of seeds for random functions\nmean_sept_area <- 0.05196 # mean swept area value in the survey used to create a grid for model predictions\nref_month <- 7  # reference month for the predictive frid\n```\n:::\n\n\n## Set grid file\n\nIn this chunk the user assigns a file name to grid_file.\nBy changing that single line the analyst can substitute a grid of different resolution, spatial extent or depth range without touching any of the statistical code that follows.\n\n\n::: {.cell paged.print='true'}\n\n```{.r .cell-code}\ngrid_file <- \"grid_0.05_(0-800m)_GSA_csquare.csv\"\n```\n:::\n\n\n## Selection of response variable\n\nThe chunk builds an expression describing the response variable selected by the user.\nThe result, saved in *index_expr*, ensures that every axis title, legend and plot annotation later in the document automatically displays the correct unit without further editing when the analysis is rerun with a different response variable.\n\n\n::: {.cell paged.print='true'}\n\n```{.r .cell-code}\n  datasets <- category # name of the dataset to be loaded\n  datasets_label <- cats[cats$cats == category,2]  # Label related to the selected category\n  \n# select response variable\n  \n  index_expr <- switch(response,\n  \"n_km2\" = expression(n / km^2),\n  \"kg_km2\" = expression(kg / km^2),\n  \"n_h\" = \"n/h\",\n  \"kg_h\" = \"kg/h\",\n  \"pa\" = \"p\"\n)\n```\n:::\n\n\n## Data loading\n\nThis step reads the survey file corresponding to the chosen litter category, converts every column name to lower-case for consistency, and inspects the first few rows to confirm that the import succeeded.\nImmediately afterwards it builds a time variable suitable for smooth modelling.\nThe calendar date of each haul is reconstructed from the year, month and day fields and then converted to “day of year”; dividing by 365 rescales that count onto the interval 0–1, which is easier for a spline to handle.\nAdding this fractional component back to the integer year yields *ctime*, a continuous time stamp that increases smoothly from one haul to the next instead of jumping at the turn of each year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load litter data (observations)\ndata <- read.table(file.path(data_dir, paste0(datasets,\"_data.csv\")), sep = \";\", header = TRUE)\ncolnames(data) <- tolower(colnames(data))\nhead(data)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"area\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"country\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"month\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"day\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"depth\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"x\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"duration\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"swept\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"category\"],\"name\":[12],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"kg\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"18ALB2013_PEC716_13\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"16\",\"7\":\"87.5\",\"8\":\"19.25342\",\"9\":\"41.31467\",\"10\":\"0.5\",\"11\":\"0.0508374\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"1\"},{\"1\":\"18ALB2013_PEC716_4\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"16\",\"7\":\"79.0\",\"8\":\"19.26858\",\"9\":\"41.56500\",\"10\":\"0.5\",\"11\":\"0.0457683\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"2\"},{\"1\":\"18ALB2013_PEC716_6\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"16\",\"7\":\"93.0\",\"8\":\"19.26825\",\"9\":\"41.40067\",\"10\":\"0.5\",\"11\":\"0.0508374\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"3\"},{\"1\":\"18ALB2013_PEC716_8\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"16\",\"7\":\"58.0\",\"8\":\"19.35217\",\"9\":\"41.18158\",\"10\":\"0.5\",\"11\":\"0.0481290\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"4\"},{\"1\":\"18ALB2013_PEC717_1\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"17\",\"7\":\"28.5\",\"8\":\"19.39592\",\"9\":\"41.55758\",\"10\":\"0.5\",\"11\":\"0.0435624\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"5\"},{\"1\":\"18ALB2013_PEC717_14\",\"2\":\"18\",\"3\":\"ALB\",\"4\":\"2013\",\"5\":\"7\",\"6\":\"17\",\"7\":\"113.5\",\"8\":\"19.10417\",\"9\":\"41.40483\",\"10\":\"0.5\",\"11\":\"0.0514647\",\"12\":\"FR\",\"13\":\"0\",\"14\":\"0\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n# creation of ctime (continuous time) field\ndate <- paste(data$year,data$month,data$day,sep=\"-\")\ndate <- yday(date)/365\ndata$yday <- date\ndata$ctime <- rowSums(data[,which(colnames(data) %in% c(\"year\",\"yday\"))])\n\nNYEARS <- length(ys)\n```\n:::\n\n\n## Grid loading\n\nThis block imports the spatial prediction grid that underpins all maps and model projections.\nThe grid file is read from the same data directory as the observations, using the file name defined earlier.\nImmediately after loading, the script filters the grid to retain only the cells whose area code matches the one specified in *AREA* field, ensuring that any subsequent predictions are confined to the study region of interest.\nA quick *head(grid)* prints the first few rows, allowing the user to verify that the grid looks correct before modelling begins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load base grid\ngrid <- read.csv(file.path(data_dir,\"grid_0.05_(0-800m)_GSA_csquare.csv\"), sep = \";\")\ncolnames(grid) <- c(\"id\", \"c_square\", \"x\", \"y\", \"AREA\", \"depth\", \"strata\")\ngrid <- grid[grid$AREA == AREA, ]\n\nhead(grid)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"c_square\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"AREA\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"depth\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"strata\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"13902\",\"2\":\"1401:215:392:1\",\"3\":\"15.225\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"5.80\",\"7\":\"0_200\",\"_rn_\":\"2444\"},{\"1\":\"14118\",\"2\":\"1401:215:392:2\",\"3\":\"15.275\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"3.75\",\"7\":\"0_200\",\"_rn_\":\"2495\"},{\"1\":\"14334\",\"2\":\"1401:215:393:1\",\"3\":\"15.325\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"9.55\",\"7\":\"0_200\",\"_rn_\":\"2545\"},{\"1\":\"14550\",\"2\":\"1401:215:393:2\",\"3\":\"15.375\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.45\",\"7\":\"0_200\",\"_rn_\":\"2629\"},{\"1\":\"14766\",\"2\":\"1401:215:394:1\",\"3\":\"15.425\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.75\",\"7\":\"0_200\",\"_rn_\":\"2704\"},{\"1\":\"14982\",\"2\":\"1401:215:394:2\",\"3\":\"15.475\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.40\",\"7\":\"0_200\",\"_rn_\":\"2775\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n### Grid expansion\n\nAt this stage the script turns the purely spatial grid into a spatio-temporal one by duplicating every cell for each survey year listed in *ys*.\nWhen the loop ends, the expanded grid replaces the original.\nA synthetic date string (always the first day of the chosen month) is then built for every grid row and transformed into “day of year”; dividing by 365 rescales that value to the unit interval.\nAdding this fraction to the integer year generates *ctime*, a continuous time stamp that parallels the one computed for the observations data, so the model can evaluate temporal smooths on the prediction grid as well.\nFinally, each grid row is informed with the variable *swept*, filled with the survey’s mean swept-area value.\nThis constant offset allows predicted quantities, which are expressed per unit swept area, to be placed on the same scale as the observation densities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- NULL\nfor (i in 1:length(ys)) {\n  gtemp <- grid\n  gtemp$year <- ys[i]\n  gtemp$month <- ref_month\n  if (i == 1) {\n    g <- gtemp\n  } else {\n    g <- rbind(g, gtemp)\n  }\n}\ngrid <- g\ndate <- paste(grid$year, grid$month, \"01\", sep = \"-\")\ndate <- yday(date) / 365\ngrid$yday <- date\ngrid$ctime <- rowSums(grid[, which(colnames(grid) %in% c(\"year\", \"yday\"))])\ngrid$swept <- mean_sept_area\n```\n:::\n\n\n# Model setup\n\nThis chunk prepares everything the script needs in order to fit and compare the three alternative GAMs.\nIt first builds an empty data‐frame called fm with six colum (formula, response, model number, dataset name, deviance explained, and AIC), so that summary statistics can be filled in after each model is fitted.\nThe next two lines pre-populate the table: rows 1–3 are given the current response variable and the codes to label the three model variants.\nThe core of the block constructs the model formulas themselves.\nEach one shares the same two-dimensional Duchon spline (*s(x, y, bs = 'ds', m = c(1, 0.5), k = 128)*) to describe spatial structure, and each includes *offset(log(swept))* so that predicted values are scaled appropriately for effort.\nThe only difference is how time enters the model:\n\n1.  Continuous smoother: adds *s(ctime, k = NYEARS, bs = 'ds', m = c(1, 0))*, letting a smooth function capture gradual trends over the entire study period.\n2.  Categorical year effect: replaces the spline with *factor(year)*, treating each year as an independent level so that no assumption is made about continuity from one year to the next.\n3.  Linear trend: inserts the single term *ctime*, forcing the temporal effect to be strictly linear.\n\nFinally the three formulas are printed to the console so the analyst can verify them before the fitting step begins.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a data frame to store models' statistics\nfm <- data.frame(matrix(ncol = 6, nrow = 0))\ncolnames(fm) <- c(\"formula\", \"response\", \"mod\", \"dataset\", \"dev.expl\", \"AIC\")\nfm[c(1:3), 2] <- response\nfm[c(1:3), 3] <- seq(1:3)\n\n# Definition of model formulas\n## 1. Use of continuous time\nfm[1, 1] <- paste0(response, \" ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + s(ctime, k = \", NYEARS, \", bs = 'ds', m = c(1, 0)) + offset(log(swept))\")\n\n## 2. Year effect instead of spline\nfm[2, 1] <- paste0(response, \" ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + factor(year) + offset(log(swept))\")\n\n## 3. Linear effect of time\nfm[3, 1] <- paste0(response, \" ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + ctime + offset(log(swept))\")\n\nfm[1, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"kg_km2 ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + s(ctime, k = 11, bs = 'ds', m = c(1, 0)) + offset(log(swept))\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfm[2, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"kg_km2 ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + factor(year) + offset(log(swept))\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfm[3, 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"kg_km2 ~ s(x,y,bs = 'ds', m = c(1, 0.5),k=128) + ctime + offset(log(swept))\"\n```\n\n\n:::\n:::\n\n\n## selection of the response variable\n\nAfter importing the raw haul table the script computes all five candidate response indices in a single step.\nTwo of them (*n_km2* and *kg_km2*) are obtained by dividing the item counts and masses by the swept area of each haul, giving densities per square kilometre.\nTwo more (*n_h* and *kg_h*) standardise the same quantities by haul duration, producing densities per hour.\nA binary presence–absence flag, *pa*, is also created by assigning a value of one to hauls where at least one item was caught and zero otherwise.\nThis code guarantees that whichever index the user selected in the parameter block (*response*) will already exist as a column in the dataset used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndname <- datasets\nd <- data.frame(data)\nd$n_km2 <- d$n / d$swept\nd$kg_km2 <- d$kg / d$swept\nd$n_h <- d$n / d$duration\nd$kg_h <- d$kg / d$duration\nd$pa <- 0\nd[d$n > 0, \"pa\"] <- 1\nd[d$n == 0, \"pa\"] <- 0\nfm[, \"dataset\"] <- dname\n```\n:::\n\n\n# Analysis on Model 1\n\n## Model fitting\n\nThis first fitting step takes the formula prepared for Model 1 (the version that uses a continuous temporal spline) and feeds it to *mgcv::gam*.\nBefore the call, a results table called *ts_tab* is allocated: one row per survey year and separate columns ready to store the three models’ yearly means, confidence limits and coefficients of variation.\nThe object *m* is set to 1 so the rest of the script knows which row of the formula matrix to pull from.\nThe conditional block chooses the appropriate likelihood according to the response variable the user selected earlier.\nPresence–absence (pa) triggers a *binomial logit* specification; any of the continuous density indices triggers the *Tweedie (tw())* family.\nIn every case the model is estimated by REML and the smoothing penalty is inflated with gamma = 1.4, helping to prevent over-fitting when data are sparse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tab <- data.frame(matrix(ncol = 13, nrow = length(ys)))\ncolnames(ts_tab) <- c(\"year\", \"mean_1\", \"lower_1\", \"higher_1\", \"mean_2\", \"lower_2\", \"higher_2\", \"mean_3\", \"lower_3\", \"higher_3\", \"cv1\",\"cv2\",\"cv3\")\nm=1  # to select model 1\n\n# fitting\n  if (response == \"pa\") {\n    mod <- suppressWarnings(gam(formula(fm[m, \"formula\"]), family = binomial(\"logit\"), method = \"REML\", data = d, gamma=1.4))\n  } else if (response == \"n_km2\") {\n    mod <- suppressWarnings(gam(formula(fm[m, \"formula\"]), tw(), method = \"REML\", data = d, gamma=1.4))\n  } else if (response == \"kg_km2\") {\n    mod <- suppressWarnings(gam(formula(fm[m, \"formula\"]), method = \"REML\", tw(), data = d, gamma=1.4))\n  } else if (response == \"n_h\") {\n    mod <- suppressWarnings(gam(formula(fm[m, \"formula\"]), tw(), method = \"REML\", data = d, gamma=1.4))\n  } else if (response == \"kg_km2\") {\n    mod <- suppressWarnings(gam(formula(fm[m, \"formula\"]), method = \"REML\", tw(), data = d, gamma=1.4))\n  }\n\n  # save gam model object\n  saveRDS(mod, file.path(resdir, paste0(dname, \"_\", fm[m, \"response\"], \"_\", fm[m, \"mod\"], \"_MODEL.rds\")))\n```\n:::\n\n\n## Saving model diagnostics\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # save model summary\n  sum <- summary(mod); sum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.665) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + s(ctime, \n    k = 11, bs = \"ds\", m = c(1, 0)) + offset(log(swept))\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.40393    0.09264   25.95   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n            edf Ref.df     F p-value    \ns(x,y)   45.031    127 2.106  <2e-16 ***\ns(ctime)  1.884     10 0.436  0.0476 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0456   Deviance explained =   40%\n-REML = 926.21  Scale est. = 7.0323    n = 953\n```\n\n\n:::\n\n```{.r .cell-code}\n  sink(file.path(resdir, paste0(dname, \"_\", fm[m, \"response\"], \"_\", fm[m, \"mod\"], \"_summary.txt\")))\n  print(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.665) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + s(ctime, \n    k = 11, bs = \"ds\", m = c(1, 0)) + offset(log(swept))\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  2.40393    0.09264   25.95   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n            edf Ref.df     F p-value    \ns(x,y)   45.031    127 2.106  <2e-16 ***\ns(ctime)  1.884     10 0.436  0.0476 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0456   Deviance explained =   40%\n-REML = 926.21  Scale est. = 7.0323    n = 953\n```\n\n\n:::\n\n```{.r .cell-code}\n  print(paste(\"AIC: \", AIC(mod)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AIC:  2524.52863629111\"\n```\n\n\n:::\n\n```{.r .cell-code}\n  sink()\n\n  # store model statistics in fm table\n  fm[m, \"dev.expl\"] <- round(sum$dev.expl * 100, 2)\n  fm[m, \"AIC\"] <- AIC(mod); AIC(mod)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2524.529\n```\n\n\n:::\n\n```{.r .cell-code}\n  # visualisation plot of splines\n    par(mfrow = c(1, 2))\n    plot(mod, all.terms = TRUE, scheme = 2, shade = TRUE)\n```\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  # save plot of splines\n  b <- getViz(mod)\n  jpeg(paste(resdir, paste0(dname, \"_\", fm[m, 2], \"_\", fm[m, \"mod\"], \"_splines.jpg\"), sep = \"/\"), width = 3000, height = 1500, res = 300)\n      par(mfrow = c(1, 2))\n      plot(mod, all.terms = TRUE, scheme = 2, shade = TRUE)\n  dev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\n## Model predictions\n\nThis section captures a complete diagnostic picture of the model immediately after it has been fitted.\nFirst, *summary(mod)* is computed and printed to the console so the user can see the principal statistics interactively.\nThe same summary, together with the numeric value of the model’s Akaike Information Criterion, is redirected to a text file for later reference.\nThe model performances are evaluated on the base of percentage deviance explained and AIC, repectivelly reported into the corresponding row of the fm table in order to make later comparisons quicker.\nThe code produces a pair of diagnostic plots that display the fitted spatial smooth and the temporal effect respectivelly.\nThey are first drawn to the current graphics device for on-screen inspection and then exported at high resolution to a JPEG file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # predictions + maps plot\n  grid$pred <- NA\n  grid$pred <- predict(mod, newdata = grid, type = \"response\")\n  head(grid)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"c_square\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"x\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"y\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"AREA\"],\"name\":[5],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"depth\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"strata\"],\"name\":[7],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"month\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"yday\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"ctime\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"swept\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pred\"],\"name\":[13],\"type\":[\"dbl[1d]\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"13902\",\"2\":\"1401:215:392:1\",\"3\":\"15.225\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"5.80\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"6.911618\",\"_rn_\":\"2444\"},{\"1\":\"14118\",\"2\":\"1401:215:392:2\",\"3\":\"15.275\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"3.75\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"6.989274\",\"_rn_\":\"2495\"},{\"1\":\"14334\",\"2\":\"1401:215:393:1\",\"3\":\"15.325\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"9.55\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"7.073190\",\"_rn_\":\"2545\"},{\"1\":\"14550\",\"2\":\"1401:215:393:2\",\"3\":\"15.375\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.45\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"7.163909\",\"_rn_\":\"2629\"},{\"1\":\"14766\",\"2\":\"1401:215:394:1\",\"3\":\"15.425\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.75\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"7.261969\",\"_rn_\":\"2704\"},{\"1\":\"14982\",\"2\":\"1401:215:394:2\",\"3\":\"15.475\",\"4\":\"41.925\",\"5\":\"18\",\"6\":\"12.40\",\"7\":\"0_200\",\"8\":\"2013\",\"9\":\"7\",\"10\":\"0.4986301\",\"11\":\"2013.499\",\"12\":\"0.05196\",\"13\":\"7.367855\",\"_rn_\":\"2775\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\n  # write.table(grid, file.path(data_dir, paste0(\"Litter_\", dname, \"_\", fm[m, 2], \"_\", fm[m, 3], \".csv\")), sep = \";\", row.names = FALSE)\n  write.table(grid, file.path(resdir, paste0(\"Litter_\", dname, \"_\", fm[m, 2], \"_\", fm[m, 3], \".csv\")), sep = \";\", row.names = FALSE)\n```\n:::\n\n\n## Averaging distribution maps\n\nThis chunk summarises the model’s spatial predictions into a single map that illustrates how litter density is currently distributed.\nIt first identifies the last three survey years and extracts from the expanded grid only the rows that belong to those years.\nGrouping by grid cell, it averages the predicted values across the three slices, yielding one mean estimate per cell (mean).\nCoastlines are added with rnaturalearth so that land–sea boundaries are clear.\nThe map itself is drawn with ggplot2: each grid cell is a tile coloured by its mean predicted density on a Viridis scale.\nCustomised font sizes ensure that labels remain legible in the exported figure.\nFinally, the graphic is printed to the R graphics device for immediate inspection and saved twice—once as a high-resolution JPEG for reports and once as a serialised ggplot object (.rds) in case the user wants to re-open or modify the map later without re-running the entire script.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # map of average model estimations for the latest three years\n  last_ys <- sort(ys)[(length(ys)-2):length(ys)]\n  map <- grid[grid$year %in% last_ys, ]\n  map <- map %>% group_by(c_square, x,y) %>% summarise(mean = mean(pred, na.rm=TRUE))\n\n  xmin <- min(map$x)\n  xmax <- max(map$x)\n  ymin <- min(map$y)\n  ymax <- max(map$y)\n  xl <- c(xmin - (xmax - xmin) * 0.05, xmax + (xmax - xmin) * 0.05)\n  yl <- c(ymin - (ymax - ymin) * 0.05, ymax + (ymax - ymin) * 0.05)\n  x_breaks <- c(round(xmin, 0), round(xmin, 0) + round((xmax - xmin) / 2, 0), round(xmin, 0) + 2 * round((xmax - xmin) / 2, 0))\n  y_breaks <- c(round(ymin, 0), round(ymin, 0) + round((ymax - ymin) / 2, 0), round(ymin, 0) + 2 * round((ymax - ymin) / 2, 0))\n  \n  library(sf)\nlibrary(rnaturalearth)\nlibrary(rnaturalearthdata)\n  world <- ne_countries(scale = \"large\", returnclass = \"sf\")\n  # world <- map_data(\"world\")\np1 <- ggplot() +\n  geom_tile(data = map, aes_string(x = \"x\", y = \"y\", fill = \"mean\")) +\n  scale_fill_viridis_c(option = \"D\", direction = -1) +\n  scale_x_continuous(breaks = x_breaks) +\n  scale_y_continuous(breaks = y_breaks) +\n  geom_sf(data = world, fill = \"lightgrey\", color = \"darkgrey\", linewidth = 0.3) +\n  coord_sf(xlim = xl, ylim = yl, expand = FALSE) +\n  theme_bw() +\n  xlab(\"Longitude\") +\n  ylab(\"Latitude\") +\n  labs(fill = index_expr) +\n  ggtitle(paste0(datasets_label)) +\n  theme(\n    plot.title = element_text(size = 16, hjust = 0.5),     \n    axis.title = element_text(size = 16),                 \n    axis.text = element_text(size = 13),                  \n    legend.title = element_text(size = 14),                \n    legend.text = element_text(size = 13)                 \n  )\n  print(p1)\n```\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  ggsave(paste(resdir, paste0(datasets,\"_\",response,\"_\",fm[m,\"mod\"],\"_MAP.jpg\"), sep = \"/\"), dpi = 300, width = 9, height = 7)\n  saveRDS(p1,paste(resdir, paste0(datasets,\"_\",response,\"_\",fm[m,\"mod\"],\"_MAP.rds\"), sep = \"/\"))\n```\n:::\n\n\n## Uncertainty estimation\n\nThe analysis at this stage generates haul-level predictions from the fitted GAM, replacing the observed response column with model-based values so that each haul retains its original covariates and sampling design.\nAfterwards, it moves on to quantify uncertainty.\nThe code produces values for model predictions at haul level, then, year by year, draws a number (*nBoot*=1000) random coefficient sets from the GAM’s multivariate-normal posterior.\nEach draw yields a new set of haul densities; averaging these within the year produces a distribution of possible annual means.\nFrom that distribution the script stores the point estimate, a 95 % confidence interval, and a coefficient of variation, placing the results in a summary table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # model prediction at the survey stations\n  hauls <- d\n  hauls[,which(colnames(hauls)==response)] <- predict(mod, type = \"response\")\n\n  # simulation from the posterior distribution and calculation of the linear predictor (the right-hand side of GAM equation) for each simulation\n\n  if (fm[m, \"dev.expl\"] > 0) {\n  cat(\"- Estimation of time series' 95% confidence interval: \\n\")\n  cat(paste(dname, \", \", fm[m, 2], \", model\", fm[m, \"mod\"], \"\\n\"))\n\n\n  # create data frame of the time series\n  ts <- data.frame(matrix(ncol = 5, nrow = length(ys)))\n  colnames(ts) <- c(\"year\", \"mean\", \"lower\", \"higher\", \"cv\")\n\n  # predictions by year\n  y=1\n  for (y in 1:length(ys)) {\n    n.row <- nrow(hauls[hauls$year==ys[y],])\n    Xp.1 = predict(mod, newdata = hauls[hauls$year==ys[y],], type = \"lpmatrix\")\n    OS.pos = numeric(nrow(hauls[hauls$year==ys[y],]))\n    terms.pos = terms(mod)\n\n    Xp.1 <- predict(mod, newdata = hauls[hauls$year==ys[y],], type = \"lpmatrix\")\n    brp.1 <- mvrnorm(n = nBoot, coef(mod), mod$Vp)\n    rep1 <- exp(Xp.1 %*% t(brp.1))\n    cv <- round(apply(rep1, 1, function(x) sd(x) / mean(x)), 2)\n    cv <- mean(cv)\n\n    if (!is.null(mod$offset)) {\n      off.num.pos <- attr(terms.pos, \"offset\")\n      for (i in off.num.pos) OS.pos <- OS.pos + eval(attr(terms.pos,\"variables\")[[i + 1]], hauls[hauls$year==ys[y],])\n    }\n    p.1 = Xp.1 %*% coef(mod) + OS.pos\n    gPred = exp(p.1)\n    pred_year = sum(exp(p.1))/n.row\n    brp.1 = mvrnorm(n = nBoot, coef(mod), mod$Vp)\n    OS.pos = matrix(0, nrow(hauls[hauls$year==ys[y],]), nBoot)\n    terms.pos = terms(mod)\n    if (!is.null(mod$offset)) {\n      off.num.pos <- attr(terms.pos, \"offset\")\n      for (i in off.num.pos) OS.pos <- OS.pos + eval(attr(terms.pos,\"variables\")[[i + 1]], hauls[hauls$year==ys[y],])\n    }\n    rep1 = data.frame(exp(Xp.1 %*% t(brp.1) + OS.pos))\n    idxSamp = as.numeric(colSums(rep1))/n.row\n    halpha = (1 - 0.95)/2\n    hi <- quantile(idxSamp, 1 - halpha, na.rm = TRUE)\n    lo <- quantile(idxSamp, halpha, na.rm = TRUE)\n    ts[y, 1] <- ys[y]\n    ts[y, 2] <- pred_year \n    ts[y, 3] <- lo\n    ts[y, 4] <- hi\n    ts[y, 5] <- cv\n  }\n\n  # table containing  time series for all the 3 models\n  if (fm[m,\"mod\"]==1) {\n      ts_tab[,c(1:4)] <- ts[,c(1:4)]\n      ts_tab[,11] <- ts[,5]\n  } else if (fm[m,\"mod\"]==2) {\n      ts_tab[,c(5:7)] <- ts[,c(2:4)]\n      ts_tab[,12] <- ts[,5]\n  } else if (fm[m,\"mod\"]==3) {\n      ts_tab[,c(8:10)] <- ts[,c(2:4)]\n      ts_tab[,13] <- ts[,5]\n  }\n\n  head(ts_tab)\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- Estimation of time series' 95% confidence interval: \nFR ,  kg_km2 , model 1 \n```\n\n\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"year\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lower_1\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"higher_1\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_2\"],\"name\":[5],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"lower_2\"],\"name\":[6],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"higher_2\"],\"name\":[7],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"mean_3\"],\"name\":[8],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"lower_3\"],\"name\":[9],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"higher_3\"],\"name\":[10],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"cv1\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"cv2\"],\"name\":[12],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"cv3\"],\"name\":[13],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2013\",\"2\":\"1.179177\",\"3\":\"0.8929843\",\"4\":\"2.086768\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.7035556\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"1\"},{\"1\":\"2014\",\"2\":\"1.390357\",\"3\":\"1.0907473\",\"4\":\"2.365658\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.6993333\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"2\"},{\"1\":\"2015\",\"2\":\"1.395881\",\"3\":\"1.1044370\",\"4\":\"2.350972\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.6882222\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"3\"},{\"1\":\"2016\",\"2\":\"1.545665\",\"3\":\"1.2398979\",\"4\":\"2.562431\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.7028889\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"4\"},{\"1\":\"2017\",\"2\":\"1.528219\",\"3\":\"1.2279275\",\"4\":\"2.500449\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.6836471\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"5\"},{\"1\":\"2018\",\"2\":\"1.715294\",\"3\":\"1.3911358\",\"4\":\"2.998700\",\"5\":\"NA\",\"6\":\"NA\",\"7\":\"NA\",\"8\":\"NA\",\"9\":\"NA\",\"10\":\"NA\",\"11\":\"0.6889888\",\"12\":\"NA\",\"13\":\"NA\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## Timeseries plot\n\nThe code constructs a time-series figure that displays the model’s annual abundance index together with its uncertainty.\nit takes the bootstrap table ts, plots each yearly mean as a blue point joined by a blue line, and draws a semi-transparent ribbon spanning the 95 % confidence limits.\nAll survey years are shown on the x-axis.\nAfter printing the plot to the screen, the script saves it twice: a high-resolution JPEG for reports and an .rds file that preserves the ggplot object for later editing without having to rerun the analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    ## plot of time series\n    if (fm[m, \"dev.expl\"] > 0) {\n  max_val <- max(ts$higher,na.rm=TRUE)\n  p2 <- ggplot()+\n    geom_point(ts,mapping=aes(year,mean),color=\"blue\")+\n    geom_line(ts,mapping=aes(year,mean),color=\"blue\")+\n    geom_ribbon(ts,mapping=aes(ymin=lower,ymax=higher,x=year), alpha = 0.1)+\n    scale_x_continuous(breaks = ys)+\n    theme_bw() +\n    theme(\n          plot.title = element_text(size = 16, hjust = 0.5),     # titolo grafico\n          axis.title = element_text(size = 16),                  # titoli assi\n          axis.text = element_text(size = 13),                   # etichette assi\n          legend.title = element_text(size = 14),                # titolo legenda\n          legend.text = element_text(size = 13)                  # testo legenda\n      )+\n    xlab(\"Year\") +\n    ylab(index_expr)+\n    ggtitle(paste(datasets_label)) + \n    theme(plot.title = element_text(hjust = 0.5))\n  print(p2)\n  ggsave(paste(resdir, paste0(dname, \"_\", fm[m, 2], \"_\", fm[m, 3], \"_TimeSeries_CI.jpg\"), sep = \"/\"), dpi = 300, width = 9, height = 7)\n  saveRDS(p2,paste(resdir, paste0(dname, \"_\", fm[m, 2], \"_\", fm[m, 3], \"_TimeSeries_CI.rds\"), sep = \"/\"))\n  } # if dev.exp > 0\n```\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n# Analysis on Model 2\n\nThe workflow shown for Model 1 is executed again—line for line for Model 2 (spatial smooth + categorical year) and Model 3 (spatial smooth + linear trend).\nEach model is fitted with the correct family, its object and summary are saved, diagnostic splines are plotted, grid-level predictions and three-year maps are saved out, bootstrap time-series indices are generated, and the same JPEG/RDS files are exported.\nAt each pass the master tables fm and ts_tab are updated so that, once all three loops finish, the user have a complete and directly comparable set of outputs for every candidate model.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.663) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + factor(year) + \n    offset(log(swept))\n\nParametric coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        0.5843     0.3921   1.490 0.136504    \nfactor(year)2014   2.3544     0.4710   4.999 6.92e-07 ***\nfactor(year)2015   1.1406     0.5065   2.252 0.024558 *  \nfactor(year)2016   1.9597     0.4807   4.077 4.98e-05 ***\nfactor(year)2017   1.6854     0.4949   3.406 0.000689 ***\nfactor(year)2018   2.1659     0.4770   4.541 6.37e-06 ***\nfactor(year)2019   2.0793     0.4779   4.351 1.51e-05 ***\nfactor(year)2020   2.0204     0.5073   3.983 7.37e-05 ***\nfactor(year)2021   1.7955     0.5151   3.486 0.000515 ***\nfactor(year)2023   1.8752     0.4800   3.907 0.000100 ***\nfactor(year)2024   2.0826     0.4754   4.381 1.32e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n         edf Ref.df     F p-value    \ns(x,y) 43.38    127 1.933  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0886   Deviance explained = 41.5%\n-REML = 918.53  Scale est. = 6.9499    n = 953\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.663) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + factor(year) + \n    offset(log(swept))\n\nParametric coefficients:\n                 Estimate Std. Error t value Pr(>|t|)    \n(Intercept)        0.5843     0.3921   1.490 0.136504    \nfactor(year)2014   2.3544     0.4710   4.999 6.92e-07 ***\nfactor(year)2015   1.1406     0.5065   2.252 0.024558 *  \nfactor(year)2016   1.9597     0.4807   4.077 4.98e-05 ***\nfactor(year)2017   1.6854     0.4949   3.406 0.000689 ***\nfactor(year)2018   2.1659     0.4770   4.541 6.37e-06 ***\nfactor(year)2019   2.0793     0.4779   4.351 1.51e-05 ***\nfactor(year)2020   2.0204     0.5073   3.983 7.37e-05 ***\nfactor(year)2021   1.7955     0.5151   3.486 0.000515 ***\nfactor(year)2023   1.8752     0.4800   3.907 0.000100 ***\nfactor(year)2024   2.0826     0.4754   4.381 1.32e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n         edf Ref.df     F p-value    \ns(x,y) 43.38    127 1.933  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0886   Deviance explained = 41.5%\n-REML = 918.53  Scale est. = 6.9499    n = 953\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AIC:  2513.90268989236\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2513.903\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n:::\n\n\n# Analysis on Model 3\n\nThe workflow shown for Model 1 and 2 is executed again—line for line for Model 3 (spatial smooth + linear trend).\nAt each step the master tables *fm* and *ts_tab* are updated so that, once all three loops finish, the user have a complete and directly comparable set of outputs for every candidate model.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.666) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + ctime + \n    offset(log(swept))\n\nParametric coefficients:\n              Estimate Std. Error t value Pr(>|t|)  \n(Intercept) -104.33999   50.93025  -2.049   0.0408 *\nctime          0.05288    0.02523   2.096   0.0363 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n         edf Ref.df     F p-value    \ns(x,y) 44.57    127 2.095  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0365   Deviance explained = 39.5%\n-REML = 928.09  Scale est. = 7.0845    n = 953\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: Tweedie(p=1.666) \nLink function: log \n\nFormula:\nkg_km2 ~ s(x, y, bs = \"ds\", m = c(1, 0.5), k = 128) + ctime + \n    offset(log(swept))\n\nParametric coefficients:\n              Estimate Std. Error t value Pr(>|t|)  \n(Intercept) -104.33999   50.93025  -2.049   0.0408 *\nctime          0.05288    0.02523   2.096   0.0363 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n         edf Ref.df     F p-value    \ns(x,y) 44.57    127 2.095  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.0365   Deviance explained = 39.5%\n-REML = 928.09  Scale est. = 7.0845    n = 953\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"AIC:  2518.29501040348\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2518.295\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-18-3.png){width=672}\n:::\n:::\n\n\n# Merging plots and results\n\nAt the very end of the script everything comes together.\nThe bootstrap table *ts_tab*, which now holds the annual indices and confidence limits for all three candidate models, is reshaped into a long format so that the three trajectories are reported on the same column.\n*ggplot* is then called to build a comparative time-series figure.\nEach model’s curve is shown as points and lines, coloured black for Model 1, green for Model 2 and blue for Model 3.\nIf Model 1 produced confidence limits, its ribbon is added in semi-transparent grey beneath the three lines to give a visual gauge of uncertainty.\nAfter rendering to the screen the plot is exported in two forms: a high-resolution JPEG for static reporting and an RDS object that preserves the ggplot object for future editing.\nFinally, two comma-separated files are written to the results directory.\nThe first (e.g. *Results_summary_n_km2_SUP.csv*) stores the fm table, which summarises deviance explained and AIC for each model; the second ( *Time_series_n_km2_SUP.csv*) contains the complete bootstrap table *ts_tab*.\nThese text files give a concise record of model performance and yearly indices that can be inspected or imported into other software without opening R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot time series of the three models together\nts_tab$year <- ys\nts_long <- reshape2::melt(ts_tab[,c(1,2,5,8)],id.vars=\"year\")\nts_long$model <- substr(as.character(ts_long$variable),nchar(as.character(ts_long$variable)),nchar(as.character(ts_long$variable)))\nts_long <- ts_long[!is.na(ts_long$value),]\n\nif (fm[1, \"dev.expl\"] > 0) {\n  p3 <- ggplot()+\n    geom_point(ts_long,mapping=aes(year,value,color=model))+\n    geom_line(ts_long,mapping=aes(year,value,color=model))+\n    scale_color_manual(values = c(\"1\" = \"black\", \"2\" = \"green\",\"3\"=\"blue\"))+\n    geom_ribbon(ts_tab,mapping=aes(ymin=lower_1,ymax=higher_1,x=year), alpha = 0.1)+\n    scale_x_continuous(breaks = ys)+\n    theme_bw() +\n    theme(\n      plot.title = element_text(size = 16, hjust = 0.5),\n      axis.title = element_text(size = 16),\n      axis.text = element_text(size = 13),\n      legend.title = element_text(size = 14),\n      legend.text = element_text(size = 13) \n    ) +\n    xlab(\"Year\") +\n    ylab(index_expr)+\n    ggtitle(paste(datasets_label))+ \n    theme(plot.title = element_text(hjust = 0.5))\n} else {\n  p3 <- ggplot()+\n    geom_point(ts_long,mapping=aes(year,value,color=model))+\n    geom_line(ts_long,mapping=aes(year,value,color=model))+\n    scale_color_manual(values = c(\"1\" = \"black\", \"2\" = \"green\",\"3\"=\"blue\"))+\n    scale_x_continuous(breaks = ys)+\n    theme_bw() +\n    theme(\n      plot.title = element_text(size = 16, hjust = 0.5),\n      axis.title = element_text(size = 16),\n      axis.text = element_text(size = 13),\n      legend.title = element_text(size = 14),\n      legend.text = element_text(size = 13) \n    ) +\n    xlab(\"Year\") +\n    ylab(index_expr)+\n    ggtitle(paste(datasets_label))+ \n    theme(plot.title = element_text(hjust = 0.5))\n}\n\nprint(p3)\n```\n\n::: {.cell-output-display}\n![](litter_modelling_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggsave(paste(resdir, paste0(dname, \"_\", response, \"_TimeSeries_CI_models.jpg\"), sep = \"/\"), dpi = 300, width = 9, height = 7)\nsaveRDS(p3,paste(resdir, paste0(dname, \"_\", response, \"_TimeSeries_CI_models.rds\"), sep = \"/\"))\n\nwrite.table(fm, file.path(resdir, paste0(\"Results_summary_\",response,\"_\",datasets,\".csv\")), sep = \";\", row.names = FALSE)\n\nts_tab$area = AREA\n\nwrite.table(ts_tab, file.path(resdir, paste0(\"_Time_series_\",response,\"_\",datasets,\".csv\")), sep = \";\", row.names = FALSE)\n```\n:::\n\n",
    "supporting": [
      "litter_modelling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}